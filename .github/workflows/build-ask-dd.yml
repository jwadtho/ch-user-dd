# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build ASK DD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGION_ID: cn-shanghai
  ACR_EE_REGISTRY: xom-ecomm-acr02-registry.cn-shanghai.cr.aliyuncs.com
  ACR_EE_INSTANCE_ID: cri-3fynibeigjxpi5o6
  ACR_EE_NAMESPACE: tootest
  ACR_EE_IMAGE: ch-user-dd
  INTERNAL_PATH: dd
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: GitHub SHA
      run: |
          GITHUB_SHA="$GITHUB_SHA"
          echo "VERSION=$GITHUB_SHA" >> $GITHUB_ENV
          sed -i "s/GITHUB_SHA/$GITHUB_SHA/g" "./kubernetes/$INTERNAL_PATH/deployment.yml"
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'

    - name: Build with Gradle
      uses: eskatos/gradle-command-action@v1
      with:
        arguments: clean build -x test
#      env:
#          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

#    - name: Build Docker image
#      run: docker build -t $ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$VERSION .

    - name: Login to ACR EE with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        login-server: "https://${{ env.ACR_EE_REGISTRY }}"
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ALICLOUD_ACCESS_KEY }}"
        access-key-secret: "${{ secrets.ALICLOUD_SECRET_KEY }}"
        instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"

#    - name: Build and push image to ACR EE
#      run: |
#        docker push "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$VERSION"

    - name: Build and Push to ACR
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: "${{ env.ACR_EE_REGISTRY }}/${{ env.ACR_EE_NAMESPACE }}/${{ env.ACR_EE_IMAGE }}:${{ env.VERSION }}"

    - name: Generate secret from docker config
      run: |
        BASE64=$(cat ${{ env.DOCKER_CONFIG }}/config.json | base64 -w 0)
        sed -i "s/BASE64_CREDENTIAL/$BASE64/g" ./kubernetes/pullImageSecret.yml
    
    - name: Setting context for Kubernetes cluster of Alibaba Cloud Kubernetes Service (ACK)
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: ${{ secrets.ALICLOUD_ACCESS_KEY }}
        access-key-secret: ${{ secrets.ALICLOUD_SECRET_KEY }}
        cluster-id: ${{ secrets.ASK_CLUSTER_ID }}
        
    # Prepare k8s yaml files
    - name: Set variable to yaml files
      run: |
        sed -e "s#{NAMESPACE}#tootest#g" kubernetes/pullImageSecret.yml > kubernetes/pullImageSecret.yaml

        sed -e "s#{NAMESPACE}#tootest#g" kubernetes/$INTERNAL_PATH/deployment.yml > kubernetes/$INTERNAL_PATH/deployment.yaml

        sed -e "s#{NAMESPACE}#tootest#g" kubernetes/$INTERNAL_PATH/service.yml > kubernetes/$INTERNAL_PATH/service.yaml
        
        kubectl apply -R -f kubernetes/namespace.yml -f kubernetes/pullImageSecret.yaml -f kubernetes/$INTERNAL_PATH/deployment.yaml -f kubernetes/$INTERNAL_PATH/service.yaml
      
